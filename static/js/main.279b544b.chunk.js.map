{"version":3,"sources":["utils/colorTheme.js","utils/dataSorter.js","components/Appbar.jsx","components/PieChart.jsx","components/BarChart.jsx","components/ChartSelection.jsx","components/DisplayPieSorting.jsx","components/WelcomeCmp.jsx","components/Appcomponent.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","blue","yellow","red","brown","gray","black","hazel","pink","unknown","green","white","dark","blond","none","grey","auburn","blonde","fair","gold","light","pale","metal","orange","tan","silver","male","female","hermaphrodite","indigo","golden","amber","magenta","purple","peach","caucasian","asian","hispanic","gastropod","mammal","reptile","amphibian","mammals","insectoid","reptilian","artificial","sentient","extractValue","arr","key","reduce","acc","nextVal","split","forEach","word","includes","push","sortData","sortKeys","data","keyName","map","s","people","filter","d","type","backgroundColor","number","length","sortIntegerData","p","Math","round","Number","replace","sort","a","b","getPeopleType","eye","peopleData","hair","skin","gender","mass","height","all","getSpeciesType","speciesData","classification","designation","lifespan","getStarshipsType","cost","starshipsData","speed","passengers","capacity","StyledAppbar","styled","div","Appbar","React","useState","woman","setWoman","onClick","role","aria-label","StyledPie","defaults","global","defaultFontFamily","PieChart","onChartClick","options","legend","position","labels","boxWidth","fontSize","fontColor","datasets","onElementsClick","elems","_options","StyledBar","BarChart","dataset","getKey","currentData","display","name","borderColor","borderWidth","StyledSelection","StyledSubSelection","SubSelection","activeSet","selectType","activeType","types","label","barChart","style","color","ChartSelection","StyledSorting","DisplayPieSorting","StyledCmp","WelcomeCmp","App","setDataset","pieChart","displayedData","setDisplayedData","className","chartType","e","StyledApp","setData","useEffect","species","starships","console","info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.279b544b.chunk.js","sourcesContent":["const colors = {\n  blue: '#84ACCE',\n  yellow: '#D5DD37',\n  red: '#C63131',\n  brown: '#3F1C00',\n  gray: '#A7BCCE',\n  black: '#141116',\n  hazel: '#9E5104',\n  pink: '#DD63AB',\n  unknown: '#DDD4DA',\n  green: '#328C1E',\n  white: '#F5F5F5',\n  dark: '#222',\n  'n/a': '#DDD4DA',\n  blond: '#EDCE78',\n  none: '#EFEFEF',\n  grey: '#848484',\n  auburn: '#772A01',\n  blonde: '#EDCE78',\n  fair: '#EDE3C7',\n  gold: '#EDC65C',\n  light: '#E8E8E8',\n  pale: '#EDE2C4',\n  metal: '#CED7E0',\n  orange: '#EA9F59',\n  tan: '#E5AE70',\n  silver: '#D1D1D1',\n  male: '#4C91CE',\n  female: '#F4869E',\n  hermaphrodite: '#51CC7E',\n  'blue-gray': '#8DA9C1',\n  'green-tan': '#437A30',\n  'brown mottle': '#A3533F',\n  'mottled green': '#4F661D',\n  indigo: '#0611DD',\n  golden: '#EDC65C',\n  amber: '#EFAC53',\n  magenta: '#C637AA',\n  purple: '#8D1BC6',\n  'pale pink': '#F4A4D3',\n  peach: '#F4BEA4',\n  caucasian: '#F4E38D',\n  asian: '#F4DB5F',\n  hispanic: '#EFB569',\n  gastropod: '#75995D',\n  mammal: '#DD8418',\n  reptile: '#94995D',\n  amphibian: '#5D8499',\n  mammals: '#DD8C2A',\n  insectoid: '#AEDD68',\n  reptilian: '#7F995D',\n  artificial: '#829992',\n  sentient: '#A9A0AA',\n};\n\nexport default colors;\n","import peopleData from '../data/people.json';\nimport vehiclesData from '../data/vehicles.json';\nimport filmsData from '../data/films.json';\nimport planetsData from '../data/planets.json';\nimport starshipsData from '../data/starships.json';\nimport speciesData from '../data/species.json';\nimport colors from './colorTheme';\n\nfunction extractValue(arr, key) {\n  return arr.reduce((acc, nextVal) => {\n    let words = nextVal[key].split(', ');\n    words.forEach((word) => {\n      if (!acc.includes(word)) {\n        acc.push(word);\n      }\n    });\n    return acc;\n  }, []);\n}\n\nfunction extractMassOrHeight(arr, key) {\n  const values = arr.reduce((acc, next) => {\n    if (!next[key].includes('unknown')) {\n      acc.push(Math.round(Number(next[key].replace(',', ''))));\n    }\n    return acc;\n  }, []);\n  const max = Math.max(...values);\n  const high = Math.round((max * 66) / 100);\n  const low = Math.round((max * 33) / 100);\n  const min = Math.min(...values);\n  return { max, high, low, min };\n}\n\nfunction sortData(sortKeys, data, keyName) {\n  return sortKeys.map((s) => {\n    const people = data.filter((d) => d[keyName].includes(s));\n    return {\n      type: s,\n      backgroundColor: colors[s],\n      number: people.length,\n      people,\n    };\n  });\n}\nfunction sortIntegerData(data, key) {\n  return data\n    .filter((p) => {\n      if (!p[key].includes('unknown')) {\n        p[key] = Math.round(Number(p[key].replace(',', '')));\n        return p;\n      }\n      return null;\n    })\n    .sort((a, b) => b[key] - a[key]);\n}\n\nfunction getPeopleType() {\n  const eye = sortData(extractValue(peopleData, 'eye_color'), peopleData, 'eye_color');\n  const hair = sortData(extractValue(peopleData, 'hair_color'), peopleData, 'hair_color');\n  const skin = sortData(extractValue(peopleData, 'skin_color'), peopleData, 'skin_color');\n  const gender = sortData(extractValue(peopleData, 'gender'), peopleData, 'gender');\n  const mass = sortIntegerData(peopleData, 'mass');\n  const height = sortIntegerData(peopleData, 'height');\n  return {\n    all: peopleData,\n    eye,\n    hair,\n    skin,\n    gender,\n    mass,\n    height,\n  };\n}\n\nfunction getSpeciesType() {\n  const eye = sortData(extractValue(speciesData, 'eye_colors'), speciesData, 'eye_colors');\n  const hair = sortData(extractValue(speciesData, 'hair_colors'), speciesData, 'hair_colors');\n  const skin = sortData(extractValue(speciesData, 'skin_colors'), speciesData, 'skin_colors');\n  const classification = sortData(\n    extractValue(speciesData, 'classification'),\n    speciesData,\n    'classification',\n  );\n  const designation = sortData(\n    extractValue(speciesData, 'designation'),\n    speciesData,\n    'designation',\n  );\n  const height = sortIntegerData(speciesData, 'average_height');\n  const lifespan = sortIntegerData(speciesData, 'average_lifespan');\n  return {\n    all: speciesData,\n    eye,\n    hair,\n    skin,\n    classification,\n    designation,\n    lifespan,\n    height,\n  };\n}\n\nfunction getStarshipsType() {\n  const cost = sortIntegerData(starshipsData, 'cost_in_credits');\n  const length = sortIntegerData(starshipsData, 'length');\n  const speed = sortIntegerData(starshipsData, 'max_atmosphering_speed');\n  const passengers = sortIntegerData(starshipsData, 'passengers');\n  const capacity = sortIntegerData(starshipsData, 'cargo_capacity');\n\n  return {\n    all: starshipsData,\n    cost,\n    length,\n    speed,\n    passengers,\n    capacity,\n  };\n}\nexport { getPeopleType, getSpeciesType, getStarshipsType };\n","import React from 'react';\nimport styled from 'styled-components';\n// font-family: 'IBM Plex Mono', monospace;\n// font-family: 'Roboto', sans-serif;\nconst StyledAppbar = styled.div`\n  height: 100%;\n  padding: 0rem 2rem;\n  color: #f2f2f2;\n  /* background: #232225; */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  h1 {\n    margin: 0;\n    font-family: 'IBM Plex Mono', monospace;\n    span {\n      cursor: pointer;\n      transition: color 200ms ease;\n      &:hover {\n        color: paleturquoise;\n      }\n    }\n  }\n  h3 {\n    margin: 0;\n    font-family: 'IBM Plex Mono', monospace;\n    font-style: italic;\n    color: #aaa;\n  }\n`;\nfunction Appbar() {\n  const [woman, setWoman] = React.useState(false);\n  return (\n    <StyledAppbar>\n      <h1 onClick={() => setWoman((s) => !s)}>\n        <span role=\"img\" aria-label=\"AstroMan\">\n          {woman ? '👩‍🚀' : '👨‍🚀'} PieWars\n        </span>\n      </h1>\n      <h3>All the Star Wars data U never wanted to know...</h3>\n    </StyledAppbar>\n  );\n}\n\nexport default Appbar;\n","import React from 'react';\nimport { Pie, defaults } from 'react-chartjs-2';\nimport styled from 'styled-components';\n\nconst StyledPie = styled.div`\n  padding-bottom: 3rem;\n  width: 100%;\n`;\n\ndefaults.global.defaultFontFamily = 'IBM Plex Mono';\n\nfunction PieChart({ onChartClick, data }) {\n  const options = {\n    legend: {\n      position: 'left',\n      labels: {\n        boxWidth: 20,\n        fontSize: 18,\n        fontColor: '#666',\n      },\n    },\n  };\n  return (\n    <StyledPie>\n      <Pie\n        options={options}\n        data={{\n          labels: data.map((d) => d.type),\n          datasets: [\n            {\n              data: data.map(({ number }) => number),\n              backgroundColor: data.map(({ backgroundColor }) => backgroundColor),\n            },\n          ],\n        }}\n        onElementsClick={(elems) =>\n          elems.length > 0 ? onChartClick(elems[0]._options.backgroundColor) : null\n        }\n      />\n    </StyledPie>\n  );\n}\n\nexport default PieChart;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport styled from 'styled-components';\n\nconst StyledBar = styled.div`\n  padding-bottom: 3rem;\n  width: 100%;\n`;\n\nfunction getKey(key, dataset) {\n  if (key === 'height' && dataset === 'species') {\n    return 'average_height';\n  }\n  if (key === 'lifespan') {\n    return 'average_lifespan';\n  }\n  if (key === 'cost') {\n    return 'cost_in_credits';\n  }\n  if (key === 'speed') {\n    return 'max_atmosphering_speed';\n  }\n  if (key === 'capacity') {\n    return 'cargo_capacity';\n  }\n  return key;\n}\n\nfunction BarChart({ data, currentData, dataset }) {\n  let key = getKey(currentData, dataset);\n  const options = {\n    legend: {\n      display: false,\n    },\n  };\n  return (\n    <StyledBar>\n      <Bar\n        options={options}\n        data={{\n          labels: data.map((p) => p.name),\n          datasets: [\n            {\n              backgroundColor: 'paleturquoise',\n              borderColor: 'paleturquoise',\n              borderWidth: 1,\n              data: data.map((p) => p[key]),\n            },\n          ],\n        }}\n      />\n    </StyledBar>\n  );\n}\n\nexport default BarChart;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSelection = styled.div`\n  padding-top: 3rem;\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n`;\n\nconst StyledSubSelection = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: baseline;\n\n  h2 {\n    margin: none;\n  }\n  h2,\n  span {\n    margin: 0rem 1rem;\n    cursor: pointer;\n    transition: color 200ms ease;\n    &:hover {\n      color: paleturquoise;\n    }\n    &::first-letter {\n      text-transform: uppercase;\n    }\n  }\n`;\n\nfunction SubSelection({ activeSet, selectType, activeType, types, label }) {\n  const barChart = [\n    'mass',\n    'height',\n    'lifespan',\n    'cost',\n    'length',\n    'speed',\n    'passengers',\n    'capacity',\n  ];\n  return (\n    <StyledSubSelection>\n      <h2\n        style={{ color: activeSet === label ? 'turquoise' : '#F2F2F2' }}\n        onClick={() => selectType(null, null, label)}\n      >\n        {label}\n      </h2>\n      {types.map((type) => (\n        <span\n          style={{\n            color: activeType === type && activeSet === label ? 'turquoise' : '#F2F2F2',\n          }}\n          onClick={() => selectType(type, barChart.includes(type) ? null : 'pie', label)}\n        >\n          {type}\n        </span>\n      ))}\n    </StyledSubSelection>\n  );\n}\nfunction ChartSelection({ selectType, activeSet, activeType }) {\n  const peopleTypes = ['eye', 'hair', 'skin', 'gender', 'mass', 'height'];\n  const speciesTypes = [\n    'eye',\n    'hair',\n    'skin',\n    'classification',\n    'designation',\n    'lifespan',\n    'height',\n  ];\n  const starshipsTypes = ['cost', 'length', 'speed', 'passengers', 'capacity'];\n  return (\n    <StyledSelection>\n      <SubSelection\n        activeSet={activeSet}\n        selectType={selectType}\n        activeType={activeType}\n        types={peopleTypes}\n        label=\"people\"\n      />\n      <SubSelection\n        activeSet={activeSet}\n        selectType={selectType}\n        activeType={activeType}\n        types={speciesTypes}\n        label=\"species\"\n      />\n      <SubSelection\n        activeSet={activeSet}\n        selectType={selectType}\n        activeType={activeType}\n        types={starshipsTypes}\n        label=\"starships\"\n      />\n    </StyledSelection>\n  );\n}\n\nexport default ChartSelection;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSorting = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  overflow-y: scroll;\n  color: #f2f2f2;\n  ul {\n    list-style-type: none;\n  }\n  li {\n    margin: 0.5rem 0;\n    font-size: 1.2rem;\n    cursor: pointer;\n    transition: color 200ms ease;\n    &:hover {\n      color: paleturquoise;\n    }\n  }\n`;\nfunction DisplayPieSorting({ data }) {\n  return (\n    <StyledSorting>\n      <ul>\n        {data.map((p) => (\n          <li>{p.name}</li>\n        ))}\n      </ul>\n    </StyledSorting>\n  );\n}\n\nexport default DisplayPieSorting;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCmp = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction WelcomeCmp() {\n  return (\n    <StyledCmp>\n      <h4>Please select datas you don't need...</h4>\n    </StyledCmp>\n  );\n}\n\nexport default WelcomeCmp;\n","import React, { useState } from 'react';\nimport Appbar from './Appbar';\nimport PieChart from './PieChart';\nimport BarChart from './BarChart';\nimport ChartSelection from './ChartSelection';\nimport DisplayPieSorting from './DisplayPieSorting';\nimport WelcomeCmp from './WelcomeCmp';\n\nfunction App({ data }) {\n  const [dataset, setDataset] = useState('people');\n  const [displayedData, setDisplayedData] = useState({\n    type: null,\n    pieChart: false,\n    display: data[dataset].all.map((p) => p),\n  });\n  function onChartClick(color) {\n    setDisplayedData((s) => ({\n      ...s,\n      display: data[dataset][displayedData.type]\n        .filter((e) => e.backgroundColor === color)\n        .map((e) => e.people)[0],\n    }));\n  }\n  function onTypeSelect(type, chartType, dataset) {\n    setDataset(dataset);\n    setDisplayedData((s) => ({\n      ...s,\n      type,\n      pieChart: chartType === 'pie' ? true : false,\n      display: data[dataset].all.map((p) => p),\n    }));\n  }\n  return (\n    <>\n      <div className=\"appbar\">\n        <Appbar />\n      </div>\n      <div className=\"main\">\n        <div className=\"chart\">\n          <ChartSelection\n            selectType={onTypeSelect}\n            activeSet={dataset}\n            activeType={displayedData.type}\n          />\n          {displayedData.type ? (\n            displayedData.pieChart ? (\n              <PieChart\n                data={data[dataset][displayedData.type]}\n                onChartClick={onChartClick}\n                currentData={displayedData}\n              />\n            ) : (\n              <BarChart\n                data={data[dataset][displayedData.type]}\n                currentData={displayedData.type}\n                dataset={dataset}\n              />\n            )\n          ) : (\n            <WelcomeCmp />\n          )}\n        </div>\n        <div className=\"result\">\n          <DisplayPieSorting data={displayedData.display} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getPeopleType, getSpeciesType, getStarshipsType } from './utils/dataSorter';\nimport AppComponent from './components/Appcomponent';\n\nconst StyledApp = styled.div`\n  * {\n    font-family: 'IBM Plex Mono', monospace;\n    color: #f2f2f2;\n  }\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  background-image: linear-gradient(to bottom, #232227, #232128, #24202a, #251f2b, #251e2c);\n  .appbar {\n    height: 10vh;\n  }\n  .main {\n    display: flex;\n    height: 90vh;\n    padding: 0rem 2rem;\n  }\n  .chart {\n    width: 75%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n  .result {\n    width: 25%;\n    height: 100%;\n  }\n`;\n\nfunction App() {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    setData({\n      people: getPeopleType(),\n      species: getSpeciesType(),\n      starships: getStarshipsType(),\n    });\n  }, []);\n  console.info('data', data);\n  return <StyledApp>{data && <AppComponent data={data} />}</StyledApp>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}